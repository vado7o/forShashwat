import asyncio
import datetime
import uuid
from collections.abc import MutableMapping
from urllib.parse import urlencode
import pyrebase
import telebot
from yookassa import Configuration, Payment
import config
import costs
import keyboards
import strings
from energies import energies
# import requests
# import flask
# from flask import Flask, request, Response

Configuration.configure(config.shop_id, config.shop_api_token)  # yookassa tokens

firebase = pyrebase.initialize_app(config.configs)
database = firebase.database()
storage = firebase.storage()

bot = telebot.TeleBot(config.token)

# app = Flask(__name__)
#
# @app.route('/', methods = ['POST', 'GET'])
# def index():
#     if request.headers.get('Sign') != None:
#         print(request.stream.read())
#     elif request.headers.get('content-type')=='application/json':
#         update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
#         bot.process_new_updates([update])
#         return  ''
#     else:
#         flask.abort(403)
#     if request.method == 'POST':
#         return Response('ok', status=200)
#     else:
#         return  " "
#
# if __name__ == "__main__":
#     from waitress import  serve
#     serve(app, host="0.0.0.0", port=8080)

@bot.message_handler(commands=['start'])
def welcome(message):
    name_id = str(message.from_user.username) + "_" + str(message.from_user.id)
    id = str(message.from_user.id)
    try:
        database.child('users').child(name_id).child('user_info').update({'info': str(message)})
        database.child('obnovleniya').update({id: False})
        saveData(name_id, 'enter')
        resetAll(id)
    except Exception as e:
        write_exceptions(e, name_id)
    deletePreMsg(name_id, message, id)
    msg = bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=keyboards.inlinekeyboard)
    createPreMsg(name_id, msg, id)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    name_id = str(call.from_user.username) + "_" + str(call.from_user.id)
    id = str(call.from_user.id)
    try:
        if database.child('obnovleniya').child(id).get().val() == True:
            bot.send_message(call.message.chat.id,
                             'Ô∏è‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è–ü–æ—è–≤–∏–ª–æ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –≤–Ω–∏–∑—É –∫–Ω–æ–ø–∫—É \'/start\' —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å üëáüëáüëá',
                             reply_markup=keyboards.markup)
        else:
            # –ï–°–õ–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ù–ê–ñ–ò–ú–ê–ï–¢ –†–ê–°–°–ß–ò–¢–ê–¢–¨ –≠–ù–ï–†–ì–ò–ò
            if call.data == "calc_energy":
                deletePreMsg(name_id, call.message, id)
                resetAll(id)
                bot.send_message(call.message.chat.id, '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é - –Ω–∞–∂–º–∏—Ç–µ üëá',
                                 reply_markup=keyboards.inlinekeyboard4)
                sendTextBeforeCalc(name_id, id)

            # –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ò–ú–ï–ï–¢ –ù–ï–ì–ê–¢–ò–í –í –ü–ï–†–í–û–ô –≠–ù–ï–†–ì–ò–ò
            if call.data == "_haveNegativeFirst_":
                deletePreMsg(name_id, call.message, id)
                msg = bot.send_message(call.message.chat.id, strings.afterFirst, parse_mode='MarkdownV2', reply_markup=keyboards.inlinekeyboard18)
                createPreMsg(name_id, msg, id)

            # –†–ê–°–°–ß–Å–¢ –í–¢–û–†–û–ô –≠–ù–ï–†–ì–ò–ò
            if call.data == "second_energy":
                deletePreMsg(name_id, call.message, id)
                dateMonth = database.child(id).child("temp_month").get().val()
                database.child(id).update({"energy_b": int(dateMonth)})
                bot.send_message(call.message.chat.id, strings.secondEnergy.format(dateMonth=dateMonth), parse_mode='MarkdownV2')
                bot.send_message(call.message.chat.id, energies.get(int(dateMonth)))
                msg = bot.send_message(call.message.chat.id, '*–ò–º–µ—é—Ç—Å—è –ª–∏ –≤ –í–∞—à–µ–π –∂–∏–∑–Ω–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π —ç–Ω–µ—Ä–≥–∏–∏ üëÜ?*',
                                       parse_mode='MarkdownV2', reply_markup=keyboards.inlinekeyboard19)
                createPreMsg(name_id, msg, id)

            # –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ò–ú–ï–ï–¢ –ù–ï–ì–ê–¢–ò–í –í–û –í–¢–û–†–û–ô –≠–ù–ï–†–ì–ò–ò
            if call.data == "_haveNegativeSecond_":
                deletePreMsg(name_id, call.message, id)
                msg = bot.send_message(call.message.chat.id, strings.afterSecond, parse_mode='MarkdownV2',
                                           reply_markup=keyboards.inlinekeyboard14)
                createPreMsg(name_id, msg, id)

            # –†–ê–°–°–ß–Å–¢ –¢–†–ï–¢–¨–ï–ô –≠–ù–ï–†–ì–ò–ò
            if call.data == "third_energy":
                deletePreMsg(name_id, call.message, id)
                database.child(id).update({"temp_month": ""})
                dateYear = database.child(id).child("temp_year").get().val()
                bot.send_message(call.message.chat.id, strings.thirdEnergy.format(dateYear=dateYear), parse_mode='MarkdownV2')
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É —Ü–∏—Ñ—Ä –≥–æ–¥–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
                i = 0
                temp_year = 0
                while i < len(dateYear):
                    temp_year += int(dateYear[i])
                    i += 1
                while temp_year > 22:
                    str_year = str(temp_year)
                    i = 0
                    temp_year = 0
                    while i < len(str_year):
                        temp_year += int(str_year[i])
                        i += 1
                database.child(id).update({"energy_c": temp_year})
                bot.send_message(call.message.chat.id, energies.get(temp_year))
                msg = bot.send_message(call.message.chat.id, '...', reply_markup=keyboards.inlinekeyboard15)
                createPreMsg(name_id, msg, id)

            # –†–ê–°–°–ß–Å–¢ –ß–ï–¢–í–Å–†–¢–û–ô –≠–ù–ï–†–ì–ò–ò
            if call.data == "fourth_energy":
                deletePreMsg(name_id, call.message, id)
                database.child(id).update({"temp_year": ""})
                en_a = database.child(id).child("energy_a").get().val()
                en_b = database.child(id).child("energy_b").get().val()
                en_c = database.child(id).child("energy_c").get().val()
                bot.send_message(call.message.chat.id, strings.fourthEnergy, parse_mode='MarkdownV2')
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º —Ü–∏—Ñ—Ä —á–µ—Ç–≤—ë—Ä—Ç–æ–π —ç–Ω–µ—Ä–≥–∏–∏ (–µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ > 22)
                temp_enD = en_a + en_b + en_c
                while temp_enD > 22:
                    i = 0
                    str_enD = str(temp_enD)
                    temp_enD = 0
                    while i < len(str_enD):
                        temp_enD += int(str_enD[i])
                        i += 1
                resetAll(id)
                bot.send_message(call.message.chat.id, energies.get(temp_enD))
                msg = bot.send_message(call.message.chat.id, '...', reply_markup=keyboards.inlinekeyboard16)
                createPreMsg(name_id, msg, id)

            # –ò–¢–û–ì –†–ê–°–°–ß–Å–¢–û–í
            if call.data == "_conclusion_":
                deletePreMsg(name_id, call.message, id)
                msg = bot.send_message(call.message.chat.id, strings.conclusion, parse_mode='MarkdownV2', reply_markup=keyboards.inlinekeyboard17)
                createPreMsg(name_id, msg, id)

            # –ï–°–õ–ò –í–´–ë–†–ê–ù–ê –ö–ù–û–ü–ö–ê –ò–ù–¢–ï–ù–°–ò–í –í –ì–õ–ê–í–ù–û–ú –ú–ï–ù–Æ
            if call.data == "new_course":
                if database.child('restricted').child(id).get().val() == True:
                    deletePreMsg(name_id, call.message, id)
                    msg = bot.send_message(call.message.chat.id, '‚ùå –í—ã —É–∂–µ –ø—Ä–æ–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É —Ä–∞–Ω–µ–µ', reply_markup=keyboards.inlinekeyboard4)
                    createPreMsg(name_id, msg, id)
                else:
                    resetAll(id)
                    deletePreMsg(name_id, call.message, id)
                    msg = bot.send_message(call.message.chat.id, "*–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –í–∞—Å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:*", parse_mode='MarkdownV2',
                                       reply_markup=keyboards.inlinekeyboard12)
                    createPreMsg(name_id, msg, id)
                    saveData(name_id, 'new_course')

            # –ù–ê–ñ–ê–¢–ò–ï –ö–ù–û–ü–ö–ò "–í–ï–†–ù–£–¢–¨–°–Ø –í –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ"
            if call.data == "mainmenu":
                resetAll(id)
                deletePreMsg(name_id, call.message, id)
                msg = bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=keyboards.inlinekeyboard)
                createPreMsg(name_id, msg, id)

            # –í–´–ë–†–ê–ù–ê –û–ü–õ–ê–¢–ê –ë–ê–ù–ö–û–í–°–ö–û–ô –ö–ê–†–¢–û–ô
            if call.data == "bank_card":
                bot.send_message(call.message.chat.id, '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é - –Ω–∞–∂–º–∏—Ç–µ üëá',
                                     reply_markup=keyboards.inlinekeyboard4)
                deletePreMsg(name_id, call.message, id)
                resetAll(id)
                saveData(name_id, 'bankCard')
                if database.child('restricted').child(id).get().val() == True:
                    msg = bot.send_message(call.message.chat.id, '‚ùå –í—ã —É–∂–µ –ø—Ä–æ–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É —Ä–∞–Ω–µ–µ',
                                           reply_markup=keyboards.inlinekeyboard4)
                    createPreMsg(name_id, msg, id)
                else:
                    bot.send_message(call.message.chat.id, '*–ü–ï–†–ï–ô–î–ò–¢–ï –ü–û –°–°–´–õ–ö–ï –ù–ò–ñ–ï –î–õ–Ø –û–ü–õ–ê–¢–´: üëáüëáüëá*', parse_mode='MarkdownV2')
                    msg = bot.send_message(call.message.chat.id, '[*__üîó –°–°–´–õ–ö–ê –î–õ–Ø –û–ü–õ–ê–¢–´ \- –Ω–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ__*]({url})'.format(url=generate_payment_link(call.message)),
                         parse_mode='MarkdownV2')
                    createPreMsg(name_id, msg, id)

            # –í–´–ë–†–ê–ù–ê –û–ü–õ–ê–¢–ê –ü–û SberPay
            if call.data == "sber_pay":
                saveData(name_id, 'sberPay')
                deletePreMsg(name_id, call.message, id)
                if database.child('restricted').child(id).get().val() == True:
                    msg = bot.send_message(call.message.chat.id, '‚ùå –í—ã —É–∂–µ –ø—Ä–æ–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É —Ä–∞–Ω–µ–µ', reply_markup=keyboards.inlinekeyboard4)
                    createPreMsg(name_id, msg, id)
                else:
                    resetAll(id)
                    bot.send_message(call.message.chat.id, '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é - –Ω–∞–∂–º–∏—Ç–µ üëá', reply_markup=keyboards.inlinekeyboard4)
                    msg = bot.send_message(call.message.chat.id,
                                           "*üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –í–∞—à email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:*",
                                           parse_mode='MarkdownV2')
                    createPreMsg(name_id, msg, id)
                    bot.register_next_step_handler(msg, registerTextForMail)

            # –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú –ü–†–ê–í–ò–õ–¨–ù–û–°–¢–ò –í–í–ï–î–Å–ù–ù–û–ì–û –ï–ú–ê–ô–õ
            if call.data == "verifyMail":
                deletePreMsg(name_id, call.message, id)
                database.child(id).update({"temp_email":call.message.text})
                saveData(name_id, 'verifyMail')
                if database.child('restricted').child(id).get().val() == True:
                    msg = bot.send_message(call.message.chat.id, '‚ùå –í—ã —É–∂–µ –ø—Ä–æ–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É —Ä–∞–Ω–µ–µ', reply_markup=keyboards.inlinekeyboard4)
                    createPreMsg(name_id, msg, id)
                else:
                    buy_process(call.message)

            # –û–ë–û –ú–ù–ï
            if call.data == 'about':
                deletePreMsg(name_id, call.message, id)
                msg = bot.send_photo(call.message.chat.id, photo=open('elenaAbout.jpg', 'rb'), caption=strings.about, parse_mode='MarkdownV2', reply_markup=keyboards.inlinekeyboard2)
                createPreMsg(name_id, msg, id)
                saveData(name_id, 'about')

            # –°–û–¶–ò–ê–õ–¨–ù–´–ï –°–ï–¢–ò
            if call.data == 'socnet':
                deletePreMsg(name_id, call.message, id)
                msg = bot.send_message(call.message.chat.id, strings.socnet, parse_mode='MarkdownV2',
                                 reply_markup=keyboards.inlinekeyboard4)
                createPreMsg(name_id, msg, id)
                saveData(name_id, 'socnet')

            # –û–¢–ó–´–í–´
            if call.data == "feedback":
                deletePreMsg(name_id, call.message, id)
                msg = bot.send_message(call.message.chat.id, strings.feedback, parse_mode='MarkdownV2',
                                 reply_markup=keyboards.inlinekeyboard4)
                createPreMsg(name_id, msg, id)
                saveData(name_id, 'feedback')


            if call.data == "main menu":    # –ï–°–¢–¨ –î–†–£–ì–û–ô mainmenu –≠–¢–û–¢ –ú–û–ñ–ù–û –£–î–ê–õ–ò–¢—å –ü–û–¢–û–ú!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                bot.send_message(call.message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ–±—ã –í—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?',
                                 reply_markup=keyboards.inlinekeyboard)
                saveData(name_id, 'main_menu')


            if call.data == "methods":  # –•–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó
                bot.send_message(call.message.chat.id, '–ü–µ—Ä–µ—á–µ–Ω—å –ø—Ä–∏–º–µ–Ω—è–µ–º—ã—Ö –º–Ω–æ—é –º–µ—Ç–æ–¥–æ–≤:',
                                 reply_markup=keyboards.inlinekeyboard3)
                saveData(name_id, 'methods')

            if call.data == "Reiki":    # –•–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó
                bot.send_message(call.message.chat.id, strings.reiki, parse_mode='MarkdownV2',
                                 reply_markup=keyboards.inlinekeyboard3)
                saveData(name_id, 'reiki')

            if call.data == "costs":     # –•–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó
                bot.send_message(call.message.chat.id,
                                 "*–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç —É—Å–ª—É–≥ —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –∏ —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å:*",
                                 parse_mode='MarkdownV2',
                                 reply_markup=keyboards.inlinekeyboard5)
                saveData(name_id, 'costs')

            if call.data == "costs_reiki":      # –•–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó
                bot.send_message(call.message.chat.id, strings.costs_reiki, parse_mode='MarkdownV2',
                                 reply_markup=keyboards.inlinekeyboard6)
                saveData(name_id, 'costs_reiki')

            if call.data == "costs_enmatrix":      # –•–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó
                bot.send_message(call.message.chat.id, strings.costs_enmatrix, parse_mode='MarkdownV2',
                                 reply_markup=keyboards.inlinekeyboard6)
                saveData(name_id, 'costs_enmatrix')

            if call.data == "costs_taro":       # –•–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó
                bot.send_message(call.message.chat.id, strings.costs_taro, parse_mode='MarkdownV2',
                                 reply_markup=keyboards.inlinekeyboard6)
                saveData(name_id, 'costs_taro')

            if call.data == "costs_enprivate":     # –•–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó
                bot.send_message(call.message.chat.id, strings.costs_enprivate, parse_mode='MarkdownV2',
                                 reply_markup=keyboards.inlinekeyboard6)
                saveData(name_id, 'costs_enprivate')

            if call.data == "costs_short_enprivate":     # –•–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó
                bot.send_message(call.message.chat.id, strings.costs_short_enprivate, parse_mode='MarkdownV2',
                                 reply_markup=keyboards.inlinekeyboard6)
                saveData(name_id, 'costs_short_enprivate')

            if call.data == "costs_vip":       # –•–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó
                bot.send_message(call.message.chat.id, strings.costs_vip, parse_mode='MarkdownV2',
                                 reply_markup=keyboards.inlinekeyboard6)
                saveData(name_id, 'costs_vip')

            if call.data == "intro":              # –•–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó
                bot.send_message(call.message.chat.id, "*–ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –≤–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:*", parse_mode='MarkdownV2')
                bot.send_audio(call.message.chat.id, audio='https://firebasestorage.googleapis.com/v0/b/pypsybot-38943.appspot.com/o/newcourse%2F2.ogg?alt=media&token=5ec3c734-28b6-42d5-b861-1fa330ffae81')
                bot.send_audio(call.message.chat.id, audio='https://firebasestorage.googleapis.com/v0/b/pypsybot-38943.appspot.com/o/newcourse%2F3.ogg?alt=media&token=7839354f-b188-4fb5-9857-4f622189c2e2')
                bot.send_message(call.message.chat.id, '1Ô∏è‚É£ –°–∫–µ–ª–µ—Ç –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —ç–Ω–µ—Ä–≥–æ–º–∞—Ç—Ä–∏—Ü—ã:')
                bot.send_photo(call.message.chat.id, photo='https://firebasestorage.googleapis.com/v0/b/pypsybot-38943.appspot.com/o/newcourse%2Fphoto_2023-02-05_11-45-29.jpg?alt=media&token=05e332e1-ac76-4d0d-87a1-8cc1b0283c30')
                bot.send_audio(call.message.chat.id, audio='https://firebasestorage.googleapis.com/v0/b/pypsybot-38943.appspot.com/o/newcourse%2F4.ogg?alt=media&token=d14f8fd3-6a3f-4a84-a317-648558e70e0a')
                bot.send_message(call.message.chat.id, '2Ô∏è‚É£ –ó–Ω–∞—á–µ–Ω–∏—è 22 —ç–Ω–µ—Ä–≥–∏–π ‚ú®')
                bot.send_document(call.message.chat.id, document='https://firebasestorage.googleapis.com/v0/b/pypsybot-38943.appspot.com/o/newcourse%2F%D0%9C%D0%B5%D1%82%D0%BE%D0%B4%D0%B8%D1%87%D0%BA%D0%B0.pdf?alt=media&token=76968a98-83f7-49bc-b89b-cc8c020f8547')
                bot.send_message(call.message.chat.id, '2‚òëÔ∏è–í–∞—à–∞ –ó–∞–¥–∞—á–∞‚¨áÔ∏è')
                bot.send_audio(call.message.chat.id, audio='https://firebasestorage.googleapis.com/v0/b/pypsybot-38943.appspot.com/o/newcourse%2Faudio_2023-02-05_11-58-23.ogg?alt=media&token=b9171af4-8f25-4c5a-a9d1-2cc15b2d639d')
                bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup=keyboards.inlinekeyboard8)
                saveData(name_id, 'intro')

            if call.data == "buy":                                # –•–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó–ó
                saveData(name_id, 'buy')
                if database.child('restricted').child(id).get().val() == True:
                    bot.send_message(call.message.chat.id, '‚ùå –í—ã —É–∂–µ –ø—Ä–æ–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É —Ä–∞–Ω–µ–µ', reply_markup=keyboards.inlinekeyboard4)
                else:
                    msg = bot.send_message(call.message.chat.id, "*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –í–∞—à email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:*",
                                 parse_mode='MarkdownV2')
                    bot.register_next_step_handler(msg, registerTextForMail)


    except Exception as e:
        write_exceptions(e, name_id)


# –ü–û–°–õ–ï –ù–ê–ñ–ê–¢–ò–Ø –ö–ù–û–ü–ö–ò –î–õ–Ø –†–ê–°–°–ß–Å–¢–ê –≠–ù–ï–†–ì–ò–ô –í–´–î–ê–Å–ú –°–ù–ê–ß–ê–õ–ê –û–ë–©–ï–ï –°–û–û–ë–©–ï–ù–ò–Ø –ò –ù–ê–ß–ò–ù–ê–ï–ú –ñ–î–ê–¢–¨ –î–ê–¢–£ –†–û–ñ–î–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
def sendTextBeforeCalc(name_id, id):
    try:
        msg = bot.send_message(id, strings.beforeCalc, parse_mode='MarkdownV2')
        createPreMsg(name_id, msg, id)
        bot.register_next_step_handler(msg, registerDateForCalc)

    except Exception as e:
        write_exceptions(e, name_id)

# –ü–û–õ–£–ß–ê–ï–ú –¢–ï–ö–°–¢ –° –î–ê–¢–û–ô –†–û–ñ–î–ï–ù–ò–Ø –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ù–ê–ß–ò–ù–ê–ï–ú –†–ê–ë–û–¢–£ –° –ù–ò–ú
def registerDateForCalc(message):
    global temp_date
    name_id = str(message.from_user.username) + "_" + str(message.from_user.id)
    id = str(message.from_user.id)
    try:
        # –í–´–†–ê–ë–ê–¢–´–í–ê–ï–ú –ò–ó –í–í–ï–î–Å–ù–ù–û–ì–û –¢–ï–ö–°–¢–ê –î–ê–¢–£
        dateString = message.text.replace(".", "/").replace("-", "/").replace("*", "/").replace(":", "/").replace(",","/")
        dateDay = dateString.split("/")[0]
        dateMonth = dateString.split("/")[1]
        dateYear = dateString.split("/")[2]
        if len(dateDay) == 1: dateDay = "0" + dateDay
        if len(dateMonth) == 1: dateMonth = "0" + dateMonth
        dateString = dateDay + "/" + dateMonth + "/" + dateYear

        #–ü–†–û–ü–ò–°–´–í–ê–ï–ú –í –ë–ê–ó–£ –î–ê–ù–ù–´–• –ü–û–õ–£–ß–ï–ù–ù–´–ï –ó–ù–ê–ß–ï–ù–ò–Ø –ú–ï–°–Ø–¶–ê –ò –ì–û–î–ê –î–õ–Ø –ò–• –î–ê–õ–¨–ù–ï–ô–®–ï–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –ò–ó –î–†–£–ì–ò–• –§–£–ù–ö–¶–ò–ô
        database.child(id).update({"temp_month": dateMonth})
        database.child(id).update({"temp_year": dateYear})

        # –ü–†–û–í–ï–†–Ø–ï–ú –í–í–ï–î–Å–ù–ù–£–Æ –î–ê–¢–£ –ù–ê –í–ê–õ–ò–î–ù–û–°–¢–¨
        format = "%d/%m/%Y"
        date = datetime.datetime.strptime(dateString, format)
        deletePreMsg(name_id, message, id)

        #–ù–ê–ß–ò–ù–ê–ï–ú –í–´–ß–ò–°–õ–ï–ù–ò–ï –ü–ï–†–í–û–ô –≠–ù–ï–†–ì–ò–ò (–≠–ù–ï–†–ì–ò–ò –î–ù–Ø)
        temp_date = int(dateDay)
        if int(dateDay) > 22:
            temp_date = int(dateDay[0]) + int(dateDay[1])
        database.child(id).update({"energy_a": temp_date})
        bot.send_message(message.chat.id, strings.firstEnergy.format(dateDay=dateDay), parse_mode='MarkdownV2')
        bot.send_message(message.chat.id, energies.get(temp_date))
        msg = bot.send_message(message.chat.id, '*–ò–º–µ—é—Ç—Å—è –ª–∏ –≤ –í–∞—à–µ–π –∂–∏–∑–Ω–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏ üëÜ?*',
                         parse_mode='MarkdownV2', reply_markup=keyboards.inlinekeyboard13)
        createPreMsg(name_id, msg, id)


    except Exception as e:
        deletePreMsg(name_id, message, id)
        msg = bot.send_message(message.chat.id, "*‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–≤–µ–¥–µ–Ω–∏–∏ –¥–∞—Ç—ã\! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞*", parse_mode='MarkdownV2', reply_markup=keyboards.inlinekeyboard4)
        sendTextBeforeCalc(msg, id)


# –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ï–ú–ê–ô–õ –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–†–ò –í–´–ë–û–†–ï –û–ü–õ–ê–¢–´ –ß–ï–†–ï–ó –Æ–ö–ê–°–°–£
def registerTextForMail(message):
    name_id = str(message.from_user.username) + "_" + str(message.from_user.id)
    id = str(message.from_user.id)
    try:
        resetAll(id)
        deletePreMsg(name_id, message, id)
        database.child(id).update({"temp_email":message.text})
        bot.send_message(message.chat.id, "*–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –µ–º–∞–π–ª: *", parse_mode='MarkdownV2')
        msg = bot.send_message(message.chat.id, message.text, reply_markup=keyboards.inlinekeyboard9)
        createPreMsg(name_id, msg, id)

    except Exception as e:
        write_exceptions(e, name_id)

# @bot.pre_checkout_query_handler(func=lambda query: True)
# def checkout(pre_checkout_query):
#     bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True, error_message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#
#
# @bot.message_handler(content_types=['successful_payment'])
# def got_payment(message):
#     bot.send_message(message.chat.id, '–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±. —Å–æ–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!'.format(
#                                 amount=costs.value))
#     bot.send_message(message.chat.id, strings.link_toCourse, parse_mode='MarkdownV2')
#     database.child('oplatili').set({message.chat.id: str(datetime.datetime.now())})
#     database.child('restricted').update({message.chat.id: True})

# –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –°–°–´–õ–ö–ò –ù–ê –û–ü–õ–ê–¢–£ –ß–ï–†–ï–ó –Æ–ö–ê–°–°–£
def buy_process(message):
    name_id = str(message.from_user.username) + "_" + str(message.from_user.id)
    id = message.chat.id
    mail = database.child(id).child("temp_email").get().val()
    bot.send_message(message.chat.id, '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é - –Ω–∞–∂–º–∏—Ç–µ üëá',
                     reply_markup=keyboards.inlinekeyboard4)
    deletePreMsg(name_id, message, id)
    try:
        payment = Payment.create({
            "amount": {
                "value": costs.value,
                "currency": "RUB"
            },
            "capture": True,
            "confirmation": {
                "type": "redirect",
                "return_url": "https://t.me/EnergyPsyBot"
            },
            "description": "–ö—É—Ä—Å –≠–Ω–µ—Ä–≥–æ—Ç–µ—Ä–∞–ø–∏–∏",
            "receipt": {
                "customer": {
                    "email": mail
                },
                "items": [
                    {
                        "description": costs.description,
                        "quantity": "1",
                        "amount": {
                            "value": costs.value,
                            "currency": "RUB"
                        },
                        "vat_code": "1"
                    }
                ]
            }
        }, uuid.uuid4())

        bot.send_message(message.chat.id, strings.textConfirmation, parse_mode='MarkdownV2')
        msg = bot.send_message(message.chat.id, '[*__üîó –°–°–´–õ–ö–ê –î–õ–Ø –û–ü–õ–ê–¢–´ \- –Ω–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ__*]({url})'.format(url=payment.confirmation.confirmation_url),
                         parse_mode='MarkdownV2')
        createPreMsg(name_id, msg, id)
        asyncio.run(check_payment(payment.id, message))

    except Exception as e:
        bot.send_message(message.chat.id, "*‚õîÔ∏è –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –µ–º–∞–π–ª –∞–¥—Ä–µ—Å–∞ Ô∏è*", parse_mode='MarkdownV2',
                         reply_markup=keyboards.inlinekeyboard11)
        write_exceptions(e, "—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω –µ–º–∞–π–ª, –Ω–æ —ç—Ç–æ –Ω–µ —Ç–æ—á–Ω–æ")

# –û–ñ–ò–î–ê–ù–ò–ï –ù–£–ñ–ù–û–ì–û –°–¢–ê–¢–£–°–ê –ü–õ–ê–¢–ï–ñ–ê –Æ–ö–ê–°–°–´
async def check_payment(payment_id, message):
    name_id = str(message.chat.username) + "_" + str(message.chat.id)
    id = str(message.chat.id)
    status = Payment.find_one(payment_id).status
    try:
        while status == 'pending':
            status = Payment.find_one(payment_id).status
            print(status)
            await asyncio.sleep(3)

        if status == 'succeeded':
            deletePreMsg(name_id, message, id)
            bot.send_message(message.chat.id, '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é - –Ω–∞–∂–º–∏—Ç–µ üëá',
                             reply_markup=keyboards.inlinekeyboard4)
            msg = bot.send_message(message.chat.id, '–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount} —Ä—É–±. —Å–æ–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ!'.format(
                                amount=costs.value))
            createPreMsg(name_id, msg, id)
            bot.send_message(message.chat.id, strings.link_toCourse, parse_mode='MarkdownV2')
            database.child('oplatili').set({name_id: str(datetime.datetime.now())})
            database.child('restricted').update({id: True})
            return True

        if status == 'canceled':
            deletePreMsg(name_id, message, id)
            bot.send_message(message.chat.id, '–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é - –Ω–∞–∂–º–∏—Ç–µ üëá',
                             reply_markup=keyboards.inlinekeyboard4)
            cancel_party = Payment.find_one(payment_id).cancellation_details.party
            cancel_reason = Payment.find_one(payment_id).cancellation_details.reason
            if cancel_reason == 'expired_on_confirmation':
                msg = bot.send_message(message.chat.id, '–ü–õ–ê–¢–Å–ñ –û–¢–ú–ï–ù–Å–ù –ø–æ –ø—Ä–∏—á–∏–Ω–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏',
                             reply_markup=keyboards.inlinekeyboard11)
                createPreMsg(name_id, msg, id)
                database.child('users').child(name_id).child('bad_payments').push({cancel_party: str(cancel_reason) + "__" + str(datetime.datetime.now())})
            else:
                write_exceptions(cancel_reason, name_id)
                msg = bot.send_message(message.chat.id, '–ü–õ–ê–¢–Å–ñ –û–¢–ú–ï–ù–Å–ù —Å—Ç–æ—Ä–æ–Ω–æ–π {party} –ø–æ –ø—Ä–∏—á–∏–Ω–µ {reason}'.format(
                    party=cancel_party,reason=cancel_reason), reply_markup=keyboards.inlinekeyboard11)
                createPreMsg(name_id, msg, id)
                database.child('users').child(name_id).child('bad_payments').push({cancel_party: str(cancel_reason) + "__" + str(datetime.datetime.now())})
            return False

    except Exception as e:
        write_exceptions(e, name_id)



# –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ü–õ–ê–¢–Å–ñ–ù–û–ô –°–°–´–õ–ö–ò PRODAMUS
def generate_payment_link(message):
    id = str(message.chat.id)
    name_id = str(message.chat.username) + "_" + str(message.chat.id)
    # URL –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã
    linktoform = 'https://pudovaes.payform.ru/'

    # –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á. –ú–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫,
    # –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã
    secret_key = 'a9ea0788f228459c'

    data = {
        # —Ö—Ö—Ö—Ö - –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑ –≤ —Å–∏—Å—Ç–µ–º–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞
        'order_id': id,

        # +7—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö—Ö - –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
        'customer_phone': '',

        # –ò–ú–Ø@prodamus.ru - e-mail –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
        'customer_email': '',

        # –ø–µ—Ä–µ—á–µ–Ω—å —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–∞–∑–∞
        'products': [
            {
                # –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
                # //          (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
                'name': '–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–∞ –ï–ª–µ–Ω—ã –ü—É–¥–æ–≤–æ–π',

                # —Ü–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞, 123 - –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å
                # (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
                'price': '50',

                # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, —Ö - –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å
                # (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
                'quantity': '1',

                #  –¢–∏–ø –æ–ø–ª–∞—Ç—ã, —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏—Ç—å):
                # 	1 - –ø–æ–ª–Ω–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –¥–æ –º–æ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ —Ä–∞—Å—á—ë—Ç–∞;
                # 	2 - —á–∞—Å—Ç–∏—á–Ω–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –¥–æ –º–æ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥–∞—á–∏
                #       –ø—Ä–µ–¥–º–µ—Ç–∞ —Ä–∞—Å—á—ë—Ç–∞;
                # 	3 - –∞–≤–∞–Ω—Å;
                # 	4 - –ø–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –≤ –º–æ–º–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ —Ä–∞—Å—á—ë—Ç–∞;
                # 	5 - —á–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ —Ä–∞—Å—á—ë—Ç–∞ –≤ –º–æ–º–µ–Ω—Ç –µ–≥–æ –ø–µ—Ä–µ–¥–∞—á–∏
                #       —Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç–æ–π –≤ –∫—Ä–µ–¥–∏—Ç;
                # 	6 - –ø–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ —Ä–∞—Å—á—ë—Ç–∞ –±–µ–∑ –µ–≥–æ –æ–ø–ª–∞—Ç—ã –≤ –º–æ–º–µ–Ω—Ç
                #       –µ–≥–æ –ø–µ—Ä–µ–¥–∞—á–∏ —Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–ø–ª–∞—Ç–æ–π –≤ –∫—Ä–µ–¥–∏—Ç;
                # 	7 - –æ–ø–ª–∞—Ç–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ —Ä–∞—Å—á—ë—Ç–∞ –ø–æ—Å–ª–µ –µ–≥–æ –ø–µ—Ä–µ–¥–∞—á–∏ —Å –æ–ø–ª–∞—Ç–æ–π –≤ –∫—Ä–µ–¥–∏—Ç.
                #      (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –±—É–¥–µ—Ç –≤–∑—è—Ç–æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                #      –ú–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–∏—Å—Ç–µ–º—ã)
                'paymentMethod': 1,

                #  –¢–∏–ø –æ–ø–ª–∞—á–∏–≤–∞–µ–º–æ–π –ø–æ–∑–∏—Ü–∏–∏, —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏
                #      –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏—Ç—å):
                # 	1 - —Ç–æ–≤–∞—Ä;
                # 	2 - –ø–æ–¥–∞–∫—Ü–∏–∑–Ω—ã–π —Ç–æ–≤–∞—Ä;
                # 	3 - —Ä–∞–±–æ—Ç–∞;
                # 	4 - —É—Å–ª—É–≥–∞;
                # 	5 - —Å—Ç–∞–≤–∫–∞ –∞–∑–∞—Ä—Ç–Ω–æ–π –∏–≥—Ä—ã;
                # 	6 - –≤—ã–∏–≥—Ä—ã—à –∞–∑–∞—Ä—Ç–Ω–æ–π –∏–≥—Ä—ã;
                # 	7 - –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç;
                # 	8 - –≤—ã–∏–≥—Ä—ã—à –ª–æ—Ç–µ—Ä–µ–∏;
                # 	9 - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –†–ò–î;
                # 	10 - –ø–ª–∞—Ç—ë–∂;
                # 	11 - –∞–≥–µ–Ω—Ç—Å–∫–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ;
                # 	12 - —Å–æ—Å—Ç–∞–≤–Ω–æ–π –ø—Ä–µ–¥–º–µ—Ç —Ä–∞—Å—á—ë—Ç–∞;
                # 	13 - –∏–Ω–æ–π –ø—Ä–µ–¥–º–µ—Ç —Ä–∞—Å—á—ë—Ç–∞.
                #  (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –±—É–¥–µ—Ç –≤–∑—è—Ç–æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ú–∞–≥–∞–∑–∏–Ω–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–∏—Å—Ç–µ–º—ã)
                'paymentObject': 4,
            },
        ],

        #  –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        'customer_extra': f'–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–∞ –ï–ª–µ–Ω—ã –ü—É–¥–æ–≤–æ–π\n{name_id} date: {datetime.datetime.now()}',

        #  –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–µ–π—Å—Ç–≤–∏–µ "–û–ø–ª–∞—Ç–∞"
        'do': 'pay',

        #  url-–∞–¥—Ä–µ—Å –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –æ–ø–ª–∞—Ç—ã
        #    (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –∞–¥—Ä–µ—Å)
        'urlReturn': 'https://t.me/EnergyPsyBot',

        # url-–∞–¥—Ä–µ—Å –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        #    (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –∞–¥—Ä–µ—Å)
        'urlSuccess': 'https://t.me/+BqBTovGu',

        #  —Å–ª—É–∂–µ–±–Ω—ã–π url-–∞–¥—Ä–µ—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞
        #            –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã –ø–æ –∑–∞–∫–∞–∑—É
        #  	         –ø–æ–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Advantshop,
        #            —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–¥ —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞
        #            (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –∞–¥—Ä–µ—Å)
        # 'urlNotification': 'https://github.com/vado7o/psybot',

        #  –∫–æ–¥ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–¥–¥–µ—Ä–∂–∫–∏,
        #      –¥–ª—è —Å–∞–º–æ–ø–∏—Å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å –ø—É—Å—Ç—ã–º –ø–æ–ª–µ–º
        #      (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –∫–æ–¥)
        'sys': '',

        #  –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã, –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç–æ–º
        #  	     –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞,
        #  	     –∏–Ω–∞—á–µ –∫–ª–∏–µ–Ω—Ç –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Ñ–æ—Ä–º—ã
        #        –≤–∞—Ä–∏–∞–Ω—Ç—ã (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ):
        #  	AC - –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
        #  	PC - –Ø–Ω–¥–µ–∫—Å.–î–µ–Ω—å–≥–∏
        #  	QW - Qiwi Wallet
        #  	WM - Webmoney
        #  	GP - –ø–ª–∞—Ç–µ–∂–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª
        # 'payment_method': 'AC',

        #  —Å—É–º–º–∞ —Å–∫–∏–¥–∫–∏ –Ω–∞ –∑–∞–∫–∞–∑
        #  	     —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —Å–∫–∏–¥–∫–∞
        #        –Ω–µ –ø—Ä–º–µ–Ω–µ–Ω–∞ –∫ —Ç–æ–≤–∞—Ä–Ω—ã–º –ø–æ–∑–∏—Ü–∏—è–º –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞
        #  	     –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º
        #        –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ø–µ–π—Ñ–æ—Ä–º—ã
        # 'discount_value': 0.00,

        #  —Ç–∏–ø –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞, —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏:
        #      FROM_INDIVIDUAL - –§–∏–∑–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ
        #      FROM_LEGAL_ENTITY - –Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ –ª–∏—Ü–æ
        #      FROM_FOREIGN_AGENCY - –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è
        #      (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ
        #       –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: FROM_INDIVIDUAL)
        'npd_income_type': 'FROM_INDIVIDUAL',

        #  –∏–Ω–Ω –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–ø–∏—Å–∞—Ç)
        #      (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –≤ —Ä–µ–∂–∏–º–µ —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ
        #       –∏ —Ç–∏–ø –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ FROM_LEGAL_ENTITY)
        'npd_income_inn': 423006573960,

        #  –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ)
        #           (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞ –≤ —Ä–µ–∂–∏–º–µ —Å–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ
        #            –∏ —Ç–∏–ø –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞ FROM_LEGAL_ENTITY –∏–ª–∏ FROM_FOREIGN_AGENCY)
        # 'npd_income_company': '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞',

        #  —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º –∏–ª–∏ –≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º
        #       –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É
        #       (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω)
        # 'link_expired': '–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º',


        #  —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
        #    (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        'paid_content': '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢–µ–ø–µ—Ä—å —É –í–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª - https://t.me/+BqBTovGupn05MGQy \n–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏!',

        # '_param_—Ö—Ö—Ö—Ö': 'psybotid'
    }

    # –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å –ø–æ–º–æ—â—å—é –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ sign (—Å–º –Ω–∏–∂–µ)
    data['signature'] = sign(data, secret_key)

    # –∫–æ–º–ø–∞–Ω—É–µ–º —Å—Å—ã–ª–∫—É —Å –ø–æ–º–æ—â—å—é –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ http_build_query (—Å–º –Ω–∏–∂–µ)
    link = linktoform + '?' + urlencode(http_build_query(data))

    return link


# –ü–û–î–ü–ò–°–¨ –ü–õ–ê–¢–Å–ñ–ù–û–ô –°–°–´–õ–ö–ò –ü–†–û–î–ê–ú–£–°
def sign(data, secret_key):
    import hashlib
    import hmac
    import json

    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è data –≤ string c –ø–æ–º–æ—â—å—é –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ deep_int_to_string (—Å–º –Ω–∏–∂–µ)
    deep_int_to_string(data)

    # –ø–µ—Ä–µ–≤–æ–¥–∏–º data –≤ JSON, —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –∫–ª—é—á–µ–π –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –±—ç–∫—Å–ª–µ—à–∏
    data_json = json.dumps(data, sort_keys=True, ensure_ascii=False, separators=(',', ':')).replace("/", "\\/")

    # —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ hmac –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–µ
    return hmac.new(secret_key.encode('utf8'), data_json.encode('utf8'), hashlib.sha256).hexdigest()


# –°–ò–°–¢–ï–ú–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–†–û–î–ê–ú–£–°
def deep_int_to_string(dictionary):
    for key, value in dictionary.items():
        if isinstance(value, MutableMapping):
            deep_int_to_string(value)
        elif isinstance(value, list) or isinstance(value, tuple):
            for k, v in enumerate(value):
                deep_int_to_string({str(k): v})
        else: dictionary[key] = str(value)


# –°–ò–°–¢–ï–ú–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–†–û–î–ê–ú–£–°
def http_build_query(dictionary, parent_key=False):
    items = []
    for key, value in dictionary.items():
        new_key = str(parent_key) + '[' + key + ']' if parent_key else key
        if isinstance(value, MutableMapping):
            items.extend(http_build_query(value, new_key).items())
        elif isinstance(value, list) or isinstance(value, tuple):
            for k, v in enumerate(value):
                items.extend(http_build_query({str(k): v}, new_key).items())
        else:
            items.append((new_key, value))
    return dict(items)


# –û–¢–°–Æ–î–ê –ù–ê–ß–ò–ù–ê–Æ–¢–°–Ø –°–ò–°–¢–ï–ú–ù–´–ï –§–£–ù–ö–¶–ò–ò


def saveData(name_id, folder):
    try:
        database.child('users').child(name_id).child('buttons').child(folder).push(str(datetime.datetime.now()))
    except Exception as e:
        write_exceptions(e, name_id)


def write_exceptions(e, name_id):
    try:
        with open('errors.txt', 'a', encoding='utf-8') as file:
            file.write("\n" + name_id + ": " + str(e) + " (" + str(datetime.datetime.now()) + ")")
    except Exception as e:
        print("–ù–µ –º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å " + str(e) + " –≤ —Ñ–∞–π–ª errors.txt")


def createPreMsg(name_id, message, id):
    try:
        database.child('messages').child(id).update({'previous_msg': message.id})
    except Exception as e:
        write_exceptions(e, name_id)


def deletePreMsg(name_id, message, id):
    try:
        bot.delete_message(message.chat.id, database.child('messages').child(id).child('previous_msg').get().val())
        database.child('messages').child(id).child('previous_msg').remove()
    except Exception as e:
        write_exceptions(e, name_id)


def resetAll(id):
    database.child(id).update({"energy_a": ""})
    database.child(id).update({"energy_b": ""})
    database.child(id).update({"energy_c": ""})
    database.child(id).update({"temp_email": ""})
    database.child(id).update({"temp_month": ""})
    database.child(id).update({"temp_year": ""})


bot.polling(non_stop=True)
# if __name__ == '__main__':
#     app.run()